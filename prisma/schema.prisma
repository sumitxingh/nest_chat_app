generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics", "tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  unique_id     String         @unique @default(uuid())
  username      String         @unique
  full_name     String?
  profile_pic   String?
  password      String
  refresh_token String?
  email         String         @unique
  reset_token   String?
  is_active     Boolean        @default(true)
  created_at    DateTime       @default(now())
  created_by    String?
  updated_at    DateTime       @updatedAt
  updated_by    String?
  Message       Message[]      @relation("SendMessages")
  Participants  Participants[]
  Group         Group[]

  @@map("user")
}

model Message {
  id              Int          @id @default(autoincrement())
  unique_id       String       @unique @default(uuid())
  content         String
  send_at         DateTime     @default(now())
  sender_id       String
  conversation_id String
  read            Boolean      @default(false)
  sender          User         @relation("SendMessages", fields: [sender_id], references: [unique_id])
  conversation    Conversation @relation(fields: [conversation_id], references: [unique_id])

  @@map("message")
}

model Conversation {
  id           Int            @id @default(autoincrement())
  unique_id    String         @unique @default(uuid())
  is_group     Boolean        @default(false)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  messages     Message[]
  participants Participants[]
  Group        Group?

  @@map("conversation")
}

model Participants {
  id              Int          @id @default(autoincrement())
  unique_id       String       @unique @default(uuid())
  user_id         String
  conversation_id String
  joined_at       DateTime     @default(now())
  user            User         @relation(fields: [user_id], references: [unique_id])
  conversation    Conversation @relation(fields: [conversation_id], references: [unique_id])

  @@unique([user_id, conversation_id])
  @@map("participants")
}

model Group {
  id              Int          @id @default(autoincrement())
  unique_id       String       @unique @default(uuid())
  name            String
  group_pic       String?
  description     String?
  conversation_id String       @unique
  created_at      DateTime     @default(now())
  created_by      String
  creator         User         @relation(fields: [created_by], references: [unique_id])
  conversation    Conversation @relation(fields: [conversation_id], references: [unique_id])

  @@map("group")
}
